    string longestPalindrome(string s) {
        string t = s;
        size_t length = s.size();
        if (length == 1){
            return s;
        }
        for (int i = static_cast<int>(s.size()); i >= 0; i--){
            s.insert(i, "#");
        }
        vector<int> p(s.size());
        int j = 1;
        for (int i = 0; i < static_cast<int>(s.size()); i++){
            if(i == 0 || i == s.size() -1){
                p[i] = 1;
            }
            else{
                while(true){
                    if (i - j < 0 || i + j >= s.size()){
                        p[i] = j;
                        j = 1;
                        break;
                    }

                    else if (s[i-j] == s[i+j]){
                        j++;
                    }
                    else{
                        p[i] = j;
                        j = 1;
                        break;
                    }
                }
            }
        }
        int max = 0;
        int index = 0;
        for (int i = 0; i < p.size(); i++){
            index = p[i] > max ? i : index;
            max = p[i] > max ? p[i] : max;
        }
        cout<<s<<endl;
        cout<<max<<"index:"<<index<<endl;
        return t.substr(index / 2 - (max-1)/2, max-1);
    }

